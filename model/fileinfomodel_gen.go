// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fileInfoFieldNames          = builder.RawFieldNames(&FileInfo{})
	fileInfoRows                = strings.Join(fileInfoFieldNames, ",")
	fileInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(fileInfoFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	fileInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(fileInfoFieldNames, "`FileId`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFileInfoFileIdPrefix = "cache:fileInfo:fileId:"
)

type (
	fileInfoModel interface {
		Insert(ctx context.Context, data *FileInfo) (sql.Result, error)
		FindOne(ctx context.Context, fileId string) (*FileInfo, error)
		Update(ctx context.Context, data *FileInfo) error
		Delete(ctx context.Context, fileId string) error
		Find(ctx context.Context, fileId string) (*[]FileInfo, error)
	}

	defaultFileInfoModel struct {
		sqlc.CachedConn
		table string
	}

	FileInfo struct {
		FileId       string  `db:"FileId"`
		FileName     string  `db:"FileName"`
		FileSize     float64 `db:"FileSize"`
		FileType     string  `db:"FileType"`
		FileUserName string  `db:"FileUserName"`
		FilePath     string  `db:"FilePath"`
	}
)

func newFileInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFileInfoModel {
	return &defaultFileInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`FileInfo`",
	}
}

func (m *defaultFileInfoModel) Delete(ctx context.Context, fileId string) error {
	fileInfoFileIdKey := fmt.Sprintf("%s%v", cacheFileInfoFileIdPrefix, fileId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `FileId` = ?", m.table)
		return conn.ExecCtx(ctx, query, fileId)
	}, fileInfoFileIdKey)
	return err
}

func (m *defaultFileInfoModel) FindOne(ctx context.Context, fileId string) (*FileInfo, error) {
	fileInfoFileIdKey := fmt.Sprintf("%s%v", cacheFileInfoFileIdPrefix, fileId)
	var resp FileInfo
	err := m.QueryRowCtx(ctx, &resp, fileInfoFileIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `FileId` = ? limit 1", fileInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, fileId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileInfoModel) Find(ctx context.Context, FileUserName string) (*[]FileInfo, error) {
	fileInfoFileIdKey := fmt.Sprintf("%s%v", cacheFileInfoFileIdPrefix, FileUserName)
	resp := make([]FileInfo, 0)
	err := m.QueryRowCtx(ctx, &resp, fileInfoFileIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `FileUserName` = ? ORDER BY FileInfo.FileType DESC,FileName ASC", fileInfoRows, m.table)
		return conn.QueryRows(&resp, query, FileUserName)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileInfoModel) Insert(ctx context.Context, data *FileInfo) (sql.Result, error) {
	fileInfoFileIdKey := fmt.Sprintf("%s%v", cacheFileInfoFileIdPrefix, data.FileId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, fileInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FileId, data.FileName, data.FileSize, data.FileType, data.FileUserName, data.FilePath)
	}, fileInfoFileIdKey)
	return ret, err
}

func (m *defaultFileInfoModel) Update(ctx context.Context, data *FileInfo) error {
	fileInfoFileIdKey := fmt.Sprintf("%s%v", cacheFileInfoFileIdPrefix, data.FileId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `FileId` = ?", m.table, fileInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FileName, data.FileSize, data.FileType, data.FileUserName, data.FilePath, data.FileId)
	}, fileInfoFileIdKey)
	return err
}

func (m *defaultFileInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheFileInfoFileIdPrefix, primary)
}

func (m *defaultFileInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `FileId` = ? limit 1", fileInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFileInfoModel) tableName() string {
	return m.table
}
